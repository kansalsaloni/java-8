Q1.What is ORM in Hibernate?
ORM stands for Object-Relational Mapping. In the context of Hibernate, ORM refers to a technique that enables developers to map Java objects to relational database tables and vice versa. 
Hibernate is an ORM framework for Java that provides a convenient and efficient way to interact with databases using object-oriented programming concepts.

With ORM, developers can define mappings between Java classes and database tables, allowing them to perform database operations using Java objects instead of writing SQL queries directly.
  Hibernate handles the underlying mapping and translation between the object-oriented model and the relational database, simplifying the data access layer and reducing the need for manual SQL statements.


####################################################################################################
Q2.What are the advantages of Hibernate over JDBC?

Object-Relational Mapping (ORM): Hibernate provides an ORM approach, which allows developers to map Java objects to database tables and perform CRUD (Create, Read, Update, Delete) operations on objects without writing SQL queries explicitly.
  This simplifies the data access layer and reduces the amount of boilerplate code.

Productivity and Maintainability: Hibernate reduces the amount of manual JDBC code that needs to be written.
  It provides automatic mapping, caching, and transaction management, which saves development time and effort.
  Additionally, changes to the database schema can be managed easily through Hibernate's mapping configuration, making the application more maintainable.

Database Independence: Hibernate provides database abstraction, allowing developers to write database-agnostic code.
  It supports multiple databases, and switching between different database systems requires minimal changes to the codebase.

Performance Optimization: Hibernate incorporates various performance optimization techniques, such as caching, lazy loading, and batching, to improve database access performance.
  These optimizations can enhance the overall performance of the application.

Transaction Management: Hibernate simplifies transaction management by providing an abstraction layer over JDBC transactions.
  It automatically manages the transaction boundaries, making it easier to handle transactions and ensuring data consistency.
  
###################################################################################################
  Q3.What are some of the important interfaces of Hibernate framework?

Some of the important interfaces in the Hibernate framework are:

SessionFactory: It is a factory class that creates Session objects. It is typically created once during application initialization and shared across the application.

Session: It represents a single-threaded unit of work and serves as the main interface for interacting with the database. It provides methods for CRUD operations, querying, and managing transactions.

Transaction: It represents a database transaction and provides methods for beginning, committing, and rolling back transactions.

Query: It represents a Hibernate query and provides methods for executing queries and retrieving results.

Criteria: It provides a simplified API for constructing queries using a fluent and type-safe approach.

Configuration: It represents the configuration settings for Hibernate and provides methods for configuring the session factory, database connection, mappings, etc.

TransactionManager: It is an interface for managing transactions in a Java EE environment. It is typically used in conjunction with the Session to manage transactions.
  
####################################################################################################
  Q4.What is a Session in Hibernate?

  A Session in Hibernate represents a single-threaded unit of work with the database.
  It acts as a gateway for interacting with the underlying database and provides methods for performing various database operations like saving, updating, deleting, and querying entities.
  A Session is obtained from a SessionFactory and is typically bound to a single database transaction.
  It maintains a first-level cache (also known as the session cache or persistence context) that keeps track of the loaded objects within the session.
  This cache ensures that the session operates with consistent and up-to-date data, allowing efficient read and write operations.

The Session also provides methods for managing transactions using the Transaction interface. It allows you to begin, commit, or rollback transactions, ensuring data integrity and consistency in the database.
  
####################################################################################################
  Q5.What is a SessionFactory?

   In Hibernate, a SessionFactory is a thread-safe factory class that is responsible for creating Session objects.
  It is typically created during the application startup and shared across the application.
  The SessionFactory is used to obtain instances of Session, which in turn provides a connection to the database.
  The SessionFactory is responsible for initializing and configuring Hibernate based on the configuration settings, such as database connection details, mapping metadata, caching, etc.
  It is an expensive object to create, and therefore, it is recommended to have only one SessionFactory instance per application.

  
####################################################################################################
  Q6.What is HQL?

HQL is a query language specific to Hibernate. It is an object-oriented query language that allows developers to write database queries using object-oriented concepts rather than dealing with SQL directly.
  HQL is similar to SQL in terms of syntax but operates on persistent objects and their properties instead of database tables and columns.
  HQL supports a wide range of features, including filtering, sorting, grouping, aggregations, joins, and projections.
  It provides a powerful and flexible way to retrieve and manipulate data from the database using object-oriented semantics.

  
####################################################################################################
  Q7.What are Many to Many associations?

Many-to-Many association is a type of relationship between entities in Hibernate where multiple instances of one entity are associated with multiple instances of another entity.
  In a many-to-many association, both entities can have multiple related entities on the other side of the association.
  For example, in a school management system, a Student entity can be associated with multiple Course entities, and a Course entity can be associated with multiple Student entities.
  
####################################################################################################
  Q8.What is hibernate caching?
  
Hibernate caching is a mechanism provided by Hibernate framework to improve the performance of database operations by reducing the number of database queries.
It involves storing frequently accessed data in memory, so that subsequent requests for the same data can be served from the cache instead of hitting the database.

Hibernate provides two levels of caching:

First Level Cache (Session Cache):

First level cache, also known as the session cache, is associated with a Hibernate Session object.
It is enabled by default and operates within the boundaries of a single session.
The first level cache is transaction-scoped, which means it is cleared and invalidated when the transaction is committed or rolled back.
  
Second Level Cache:

Second level cache is an optional cache that spans multiple sessions and is shared by all sessions in an application.
It is enabled separately and can be configured with various caching providers such as EHCache, Infinispan, or Hazelcast.
The second level cache is typically configured for entities and collections that are frequently accessed across sessions.

  
####################################################################################################
  Q9.What is the difference between first level cache and second level cache?
  
First Level Cache (Session Cache):

- The first level cache is associated with a specific Hibernate Session and is limited to that session's boundaries. It is cleared and invalidated at the end of the session or transaction.
- First level cache, also known as the session cache, is associated with a Hibernate Session object.
- It is enabled by default and operates within the boundaries of a single session.
- The first level cache is transaction-scoped, which means it is cleared and invalidated when the transaction is committed or rolled back.

  Second Level Cache:

- The second level cache is shared by multiple sessions and has a broader scope. It can be configured to span the entire application or a specific set of sessions. It persists beyond the lifespan of a single session and can be shared and reused across sessions.
- Second level cache is an optional cache that spans multiple sessions and is shared by all sessions in an application.
- It is enabled separately and can be configured with various caching providers such as EHCache, Infinispan, or Hazelcast.
- The second level cache is typically configured for entities and collections that are frequently accessed across sessions.
####################################################################################################
  Q10.What can you tell about Hibernate Configuration File?

  The Hibernate configuration file, typically named hibernate.cfg.xml, is an essential configuration file used by Hibernate to initialize and configure the Hibernate framework.
  It provides necessary information and settings for establishing a connection with the database, mapping Java classes to database tables, and configuring various Hibernate-specific properties.
####################################################################################################
####################################################################################################
###################################################################################################

####################################################################################################
####################################################################################################
  
  
